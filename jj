use mongodb::bson::{self, oid::ObjectId, DateTime, Document};
use serde::{Deserialize, Serialize};

#[derive(Debug, Deserialize, Serialize, Clone)]
pub struct ClassTypeModel {
    #[serde(rename = "_id", skip_serializing_if = "Option::is_none")]
    pub id: Option<ObjectId>,
    pub name: String,
    pub description: Option<String>,
    pub roles: Option<Vec<String>>,
    pub created_on: DateTime,
    pub updated_on: Option<DateTime>,
}

#[derive(Debug, Deserialize, Serialize, Clone)]
pub struct ClassTypeModelGet {
    pub id: String,
    pub name: String,
    pub description: Option<String>,
    pub roles: Option<Vec<String>>,
    pub created_on: String,
    pub updated_on: Option<String>,
}

#[derive(Debug, Deserialize, Serialize, Clone)]
pub struct ClassTypeModelNew {
    pub name: String,
    pub description: Option<String>,
    pub roles: Option<Vec<String>>,
}

#[derive(Debug, Deserialize, Serialize, Clone)]
pub struct ClassTypeModelPut {
    pub name: Option<String>,
    pub description: Option<String>,
    pub roles: Option<Vec<String>>,
}

impl ClassTypeModel {
    pub fn new(class_type: ClassTypeModelNew) -> Self {
        ClassTypeModel {
            id: None,
            name: class_type.name,
            description: class_type.description,
            roles: class_type.roles,
            created_on: DateTime::now(),
            updated_on: None,
        }
    }

    pub fn format(class_type: Self) -> ClassTypeModelGet {
        ClassTypeModelGet {
            id: class_type.id.map_or("".to_string(), |id| id.to_string()),
            name: class_type.name,
            description: class_type.description,
            roles: class_type.roles,
            created_on: class_type
                .created_on
                .try_to_rfc3339_string()
                .unwrap_or("".to_string()),
            updated_on: Some(class_type.updated_on.map_or("".to_string(), |date| {
                date.try_to_rfc3339_string().unwrap_or("".to_string())
            })),
        }
    }

    pub fn put(class_type: ClassTypeModelPut) -> Document {
        let mut doc = Document::new();
        let mut is_update = false;

        let mut insert_if_some = |key: &str, value: Option<bson::Bson>| {
            if let Some(v) = value {
                doc.insert(key, v);
                is_update = true;
            }
        };

        insert_if_some("name", class_type.name.map(bson::Bson::String));
        insert_if_some(
            "description",
            class_type.description.map(bson::Bson::String),
        );
        if let Some(roles) = class_type.roles {
            let existing_roles = doc.get_array("roles").unwrap_or(&vec![]).clone();
            let mut new_roles = existing_roles
                .iter()
                .map(|r| r.as_str().unwrap().to_string())
                .collect::<Vec<String>>();

            for role in roles {
                if let Some(pos) = new_roles.iter().position(|r| r == &role) {
                    new_roles.remove(pos);
                } else {
                    new_roles.push(role);
                }
            }

            doc.insert(
                "roles",
                bson::Bson::Array(new_roles.into_iter().map(bson::Bson::String).collect()),
            );
            is_update = true;
        }

        if is_update {
            doc.insert("updated_on", bson::Bson::DateTime(DateTime::now()));
        }

        doc
    }
}

////////////////////////////////////////////////////////
///
/// use mongodb::{
use mongodb::{
    bson::{doc, oid::ObjectId},
    options::IndexOptions,
    IndexModel,
};
use std::sync::Arc;

use crate::{
    error::db_class_error::{DbClassError, DbClassResult},
    libs::functions::characters_fn::{generate_username, is_valid_username},
    models::file_model::file_type_model::{
        FileTypeModel, FileTypeModelGet, FileTypeModelNew, FileTypeModelPut,
    },
    AppState,
};

pub async fn create_file_type(
    state: Arc<AppState>,
    mut file_type: FileTypeModelNew,
) -> DbClassResult<FileTypeModelGet> {
    if let Some(ref username) = file_type.username {
        let check_username = is_valid_username(username);
        if let Err(e) = check_username {
            return Err(DbClassError::OtherError { err: e });
        }
        let get_username = get_file_type_by_username(state.clone(), username.clone()).await;
        if get_username.is_ok() {
            return Err(DbClassError::OtherError {
                err: format!(
                    "File type username is leady exit [{}], please type other username",
                    username
                ),
            });
        }
    }

    let index = IndexModel::builder()
        .keys(doc! {"username": 1,})
        .options(IndexOptions::builder().unique(true).build())
        .build();

    state
        .db
        .file_type
        .collection
        .create_index(index)
        .await
        .map_err(|e| DbClassError::OtherError { err: e.to_string() })?;

    if file_type.username.is_none() {
        file_type.username = Some(generate_username(&file_type.name));
    }
    let create = state
        .db
        .file_type
        .create(FileTypeModel::new(file_type), Some("file_type".to_string()))
        .await?;

    get_file_type_by_id(state, create).await
}

pub async fn get_file_type_by_username(
    state: Arc<AppState>,
    username: String,
) -> DbClassResult<FileTypeModelGet> {
    let get = state
        .db
        .file_type
        .collection
        .find_one(doc! {"username": &username})
        .await?
        .ok_or(DbClassError::OtherError {
            err: format!("file_type not found by username [{}]", &username),
        })?;

    let mut file_type = FileTypeModel::format(get);
    Ok(file_type)
}

pub async fn get_file_type_by_id(
    state: Arc<AppState>,
    id: ObjectId,
) -> DbClassResult<FileTypeModelGet> {
    let get = state
        .db
        .file_type
        .get_one_by_id(id, Some("file_type".to_string()))
        .await?;
    Ok(FileTypeModel::format(get))
}

pub async fn get_all_file_type(state: Arc<AppState>) -> DbClassResult<Vec<FileTypeModelGet>> {
    let get = state
        .db
        .file_type
        .get_many(None, Some("file_type".to_string()))
        .await?;
    Ok(get.into_iter().map(FileTypeModel::format).collect())
}

pub async fn update_file_type_by_id(
    state: Arc<AppState>,
    id: ObjectId,
    file_type: FileTypeModelPut,
) -> DbClassResult<FileTypeModelGet> {
    state
        .db
        .file_type
        .update(
            id,
            FileTypeModel::put(file_type),
            Some("file_type".to_string()),
        )
        .await?;
    get_file_type_by_id(state, id).await
}

pub async fn delete_file_type_by_id(
    state: Arc<AppState>,
    id: ObjectId,
) -> DbClassResult<FileTypeModelGet> {
    let delete = state
        .db
        .file_type
        .delete(id, Some("file_type".to_string()))
        .await?;
    Ok(FileTypeModel::format(delete))
}

////////////////////////////////

use actix_web::{
    web::{Data, Json, Path},
    HttpResponse, Responder,
};

use crate::{
    controllers::class_controller::class_type_controller::{
        create_class_type, delete_class_type_by_id, get_all_class_type, get_class_type_by_id,
        update_class_type_by_id,
    },
    libs::functions::object_id::change_string_into_object_id,
    models::{
        class_model::class_type_model::{ClassTypeModelNew, ClassTypeModelPut},
        request_error_model::ReqErrModel,
    },
    AppState,
};

pub async fn create_class_type_handle(
    state: Data<AppState>,
    class_type: Json<ClassTypeModelNew>,
) -> impl Responder {
    let create = create_class_type(state.into_inner(), class_type.into_inner()).await;
    match create {
        Err(e) => HttpResponse::BadRequest().json(ReqErrModel {
            message: e.to_string(),
        }),
        Ok(r) => HttpResponse::Created().json(r),
    }
}

pub async fn get_all_class_type_handle(state: Data<AppState>) -> impl Responder {
    let get = get_all_class_type(state.into_inner()).await;
    match get {
        Err(e) => HttpResponse::BadRequest().json(ReqErrModel {
            message: e.to_string(),
        }),
        Ok(r) => HttpResponse::Ok().json(r),
    }
}

pub async fn get_class_type_by_id_handle(
    state: Data<AppState>,
    id: Path<String>,
) -> impl Responder {
    match change_string_into_object_id(id.into_inner()) {
        Err(e) => HttpResponse::BadRequest().json(e),
        Ok(i) => match get_class_type_by_id(state.into_inner(), i).await {
            Err(e) => HttpResponse::BadRequest().json(ReqErrModel {
                message: e.to_string(),
            }),
            Ok(r) => HttpResponse::Ok().json(r),
        },
    }
}

pub async fn delete_class_type_by_id_handle(
    state: Data<AppState>,
    id: Path<String>,
) -> impl Responder {
    match change_string_into_object_id(id.into_inner()) {
        Err(e) => HttpResponse::BadRequest().json(e),
        Ok(i) => match delete_class_type_by_id(state.into_inner(), i).await {
            Err(e) => HttpResponse::BadRequest().json(ReqErrModel {
                message: e.to_string(),
            }),
            Ok(r) => HttpResponse::Ok().json(r),
        },
    }
}

pub async fn update_class_type_by_id_handle(
    state: Data<AppState>,
    class_type: Json<ClassTypeModelPut>,
    id: Path<String>,
) -> impl Responder {
    match change_string_into_object_id(id.into_inner()) {
        Err(e) => HttpResponse::BadRequest().json(e),
        Ok(i) => {
            match update_class_type_by_id(state.into_inner(), i, class_type.into_inner()).await {
                Err(e) => HttpResponse::BadRequest().json(ReqErrModel {
                    message: e.to_string(),
                }),
                Ok(r) => HttpResponse::Ok().json(r),
            }
        }
    }
}

///////////////////////////////////////

use actix_web::web::{self, delete, get, post, put};
use std::sync::Arc;

use crate::{
    handlers::class_handle::class_type_handler::{
        create_class_type_handle, delete_class_type_by_id_handle, get_all_class_type_handle,
        get_class_type_by_id_handle, update_class_type_by_id_handle,
    },
    AppState,
};

pub fn routers_class_type(
    cfg: &mut web::ServiceConfig,
    state: Arc<AppState>,
) -> &mut actix_web::web::ServiceConfig {
    cfg.service(
        web::scope("type")
            .app_data(web::Data::new(state.clone()))
            .route("", post().to(create_class_type_handle))
            .route("", get().to(get_all_class_type_handle))
            .route("/{id}", get().to(get_class_type_by_id_handle))
            .route("/{id}", delete().to(delete_class_type_by_id_handle))
            .route("{id}", put().to(update_class_type_by_id_handle)),
    )
}
